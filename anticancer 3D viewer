<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>항암제 작용 3D 시뮬레이션</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f0f0f0;
      text-align: center;
      padding: 20px;
    }
    canvas {
      width: 100%;
      height: 400px;
      display: block;
      margin: 20px auto;
    }
    select {
      padding: 10px;
      font-size: 16px;
    }
    #info {
      margin-top: 10px;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <h1>항암제 작용 3D 시뮬레이션</h1>
  <select id="drugSelect" onchange="loadDrugAction()">
    <option value="">항암제 선택</option>
    <option value="cisplatin">시스플라틴</option>
    <option value="imatinib">이매티닙</option>
    <option value="pembrolizumab">펨브롤리주맙</option>
  </select>
  <div id="info">항암제를 선택하면 작용 방식이 시각화됩니다.</div>
  <canvas id="viewer"></canvas>

  <!-- Three.js 라이브러리 -->
  <script src="https://cdn.jsdelivr.net/npm/three@0.155/build/three.min.js"></script>
  <script>
    const canvas = document.getElementById('viewer');
    const renderer = new THREE.WebGLRenderer({ canvas });
    renderer.setSize(canvas.clientWidth, canvas.clientHeight);

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);
    camera.position.z = 5;

    const light = new THREE.PointLight(0xffffff, 1, 100);
    light.position.set(10, 10, 10);
    scene.add(light);

    let model = null;

    function clearScene() {
      if (model) scene.remove(model);
    }

    function createModel(color) {
      const geometry = new THREE.SphereGeometry(1, 32, 32);
      const material = new THREE.MeshStandardMaterial({ color });
      const sphere = new THREE.Mesh(geometry, material);
      return sphere;
    }

    function loadDrugAction() {
      const drug = document.getElementById('drugSelect').value;
      const info = document.getElementById('info');

      clearScene();
      let color = 0xffffff;
      let text = '';

      switch (drug) {
        case 'cisplatin':
          color = 0x0077ff;
          text = '시스플라틴: DNA에 결합하여 복제를 방해함.';
          break;
        case 'imatinib':
          color = 0xff7700;
          text = '이매티닙: 특정 효소(티로신 키나제)를 억제함.';
          break;
        case 'pembrolizumab':
          color = 0x44cc44;
          text = '펨브롤리주맙: 면역 세포의 PD-1 수용체를 차단함.';
          break;
        default:
          text = '항암제를 선택하면 작용 방식이 시각화됩니다.';
          return;
      }

      model = createModel(color);
      scene.add(model);
      info.textContent = text;
    }

    function animate() {
      requestAnimationFrame(animate);
      if (model) model.rotation.y += 0.01;
      renderer.render(scene, camera);
    }

    animate();
  </script>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body>
</html>
